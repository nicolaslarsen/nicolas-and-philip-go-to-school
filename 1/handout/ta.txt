Comment:
  src/.SubsInterpreter.hs.swp doesn't look like source code, purging.
  Consider purging this before submitting to a human.
Comment:
  GHC with -Wall -Werror wasn't happy.
  Hence, your TA not likely to be happy.
Running hlint...
/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:50:22: Suggestion: Use lambda-case
Found:
  \ c ->
    case c of
        (env, penv) -> Right (x, env)
        _ -> Left "Err"
Perhaps:
  \case
      (env, penv) -> Right (x, env)
      _ -> Left "Err"
Note: may require `{-# LANGUAGE LambdaCase #-}` adding to the top of the file

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:81:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:81:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:85:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:85:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:89:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:89:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:104:23: Warning: Redundant lambda
Found:
  f = \ env -> Map.insert name val env
Perhaps:
  f env = Map.insert name val env

/tmp/tmpeto3uy8g/src/SubsInterpreter.hs:104:27: Suggestion: Avoid lambda
Found:
  \ env -> Map.insert name val env
Perhaps:
  Map.insert name val

9 hints
src/SubsInterpreter.hs:57:1: too long line (91 chars)
src/SubsInterpreter.hs:107:66: trailing (1) white space
src/SubsInterpreter.hs:120:1: too long line (82 chars)
src/SubsInterpreter.hs:121:66: trailing (1) white space
src/SubsInterpreter.hs:122:1: too long line (86 chars)
src/SubsInterpreter.hs:124:66: trailing (1) white space
src/SubsInterpreter.hs:125:48: trailing (1) white space
src/SubsInterpreter.hs:126:50: trailing (1) white space
src/SubsInterpreter.hs:130:73: trailing (1) white space
src/SubsInterpreter.hs:131:81: trailing (1) white space
src/SubsInterpreter.hs:132:1: too long line (84 chars)
src/SubsInterpreter.hs:132:85: trailing (2) white space
src/SubsInterpreter.hs:53:40: break line after "of"
src/SubsInterpreter.hs:120:23: put one blank after -- in --Ar
src/SubsInterpreter.hs:121:23: put one blank after -- in --Ar
src/SubsInterpreter.hs:124:23: put one blank after -- in --As
src/SubsInterpreter.hs:130:35: break line after "of"
Warning:
  It appears that you are using these functions:
    undefined
  
  These are partial functions. We advise against using them, since they
  may lead to undefined behaviour. Consider implementing them yourself,
  in a non-partial way.
  
  See also https://wiki.haskell.org/Avoiding_partial_functions
Running some property-based tests...

SubsInterpreter.hs:52:23: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In a case alternative: _ -> ...
   |
52 |                       _ -> Left "Err"
   |                       ^^^^^^^^^^^^^^^

SubsInterpreter.hs:94:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for ‘lol’: lol _ = ...
   |
94 | lol _ = Left "hej"
   | ^^^^^^^^^^^^^^^^^^
Tests
  Simple expressions
    Variable declaration:           FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Addition:                       FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Addition and multiplication:    FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    String concatenation:           FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    String/Number concatenation:    FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    String/Number concatenation:    FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Undefined:                      OK
    Undefined assignment:           FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    True constant:                  OK
    False constant:                 OK
    String constant:                OK
    Comma:                          FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Array:                          FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Compare false === false:        FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Compare false === true:         FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Compare true === false:         FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Compare true === true:          FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Compare arrays:                 FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Compare arrays:                 FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
  Multiple expressions
    Assignments are stored:         FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Assignments can be overridden:  FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Variable-swap:                  FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Nested assignment expressions:  FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
  Array comprehensions
    Simple For:                     FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Computing array of squares:     FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Nested For:                     FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Filter:                         FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Array comprehension scope test: FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case
    Array comprehension scope test: FAIL
      Exception: SubsInterpreter.hs:(117,17)-(127,52): Non-exhaustive patterns in case

25 out of 29 tests failed (0.01s)
Our tests could not be run with your source.
static/strict-compile.sh FAILED
static/hlint.sh FAILED
static/style-scanner.sh FAILED
dynamic/hunit.sh FAILED
---
I am not fully satisfied.
---
Found a bug? Are the messages too cryptic?
Let us know at Absalon.


SubsInterpreter.hs:47:26: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘runSubsM’
   |
47 | newtype SubsM a = SubsM {runSubsM :: Context -> Either Error (a, Env)}
   |                          ^^^^^^^^

SubsInterpreter.hs:51:29: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
   |
51 |                       (env, penv) -> Right (x, env)
   |                             ^^^^

SubsInterpreter.hs:52:23: error: [-Woverlapping-patterns, -Werror=overlapping-patterns]
    Pattern match is redundant
    In a case alternative: _ -> ...
   |
52 |                       _ -> Left "Err"
   |                       ^^^^^^^^^^^^^^^

SubsInterpreter.hs:59:22: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘context’
   |
59 |   fail s =  SubsM $ \context -> Left s
   |                      ^^^^^^^

SubsInterpreter.hs:93:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘lol’
   |
93 | lol (env, penv) = Right (1, env)
   | ^^^

SubsInterpreter.hs:93:11: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
   |
93 | lol (env, penv) = Right (1, env)
   |           ^^^^

SubsInterpreter.hs:94:1: error: [-Woverlapping-patterns, -Werror=overlapping-patterns]
    Pattern match is redundant
    In an equation for ‘lol’: lol _ = ...
   |
94 | lol _ = Left "hej"
   | ^^^^^^^^^^^^^^^^^^

SubsInterpreter.hs:101:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘modifyEnv’
    |
101 | modifyEnv f = SubsM $ \(env, penv) -> Right ((), f env)
    | ^^^^^^^^^

SubsInterpreter.hs:101:30: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
    |
101 | modifyEnv f = SubsM $ \(env, penv) -> Right ((), f env)
    |                              ^^^^

SubsInterpreter.hs:104:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘putVar’
    |
104 | putVar name val = let f = \env -> Map.insert name val env in modifyEnv f
    | ^^^^^^

SubsInterpreter.hs:107:30: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
    |
107 | getVar name = SubsM $ \(env, penv) -> case Map.lookup name env of 
    |                              ^^^^

SubsInterpreter.hs:112:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘getFunction’
    |
112 | getFunction name = SubsM $ \(env, penv) -> case Map.lookup name penv of
    | ^^^^^^^^^^^

SubsInterpreter.hs:117:17: error: [-Wincomplete-patterns, -Werror=incomplete-patterns]
    Pattern match(es) are non-exhaustive
    In a case alternative:
        Patterns not matched:
            (Array _)
            (Compr _)
            (Call _ _)
            (Assign _ _)
            ...
    |
117 | evalExpr expr = case expr of
    |                 ^^^^^^^^^^^^...

SubsInterpreter.hs:123:25: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘id’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Base’)
    |
123 |                     Var id -> getVar id
    |                         ^^

SubsInterpreter.hs:132:70: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘a’ shadows the existing binding
      bound at SubsInterpreter.hs:130:44
    |
132 |                                                               Right (a,_) -> Right a  
    |                                                                      ^
