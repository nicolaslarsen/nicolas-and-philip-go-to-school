Comment:
  src/ta.txt doesn't look like source code, purging.
  Consider purging this before submitting to a human.
Comment:
  src/.SubsInterpreter.hs.swp doesn't look like source code, purging.
  Consider purging this before submitting to a human.
Comment:
  GHC with -Wall -Werror wasn't happy.
  Hence, your TA not likely to be happy.
Running hlint...
/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:48:22: Suggestion: Use lambda-case
Found:
  \ c ->
    case c of
        (env, penv) -> Right (x, env)
        _ -> Left "Err"
Perhaps:
  \case
      (env, penv) -> Right (x, env)
      _ -> Left "Err"
Note: may require `{-# LANGUAGE LambdaCase #-}` adding to the top of the file

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:83:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:83:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:84:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (StringVal y)]
Perhaps:
  [StringVal x, (StringVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:84:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (StringVal y)]
Perhaps:
  [(StringVal x), StringVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:85:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (StringVal y)]
Perhaps:
  [IntVal x, (StringVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:85:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (StringVal y)]
Perhaps:
  [(IntVal x), StringVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:85:56: Suggestion: Redundant bracket
Found:
  (show x) ++ y
Perhaps:
  show x ++ y

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:86:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (IntVal y)]
Perhaps:
  [StringVal x, (IntVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:86:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (IntVal y)]
Perhaps:
  [(StringVal x), IntVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:86:57: Suggestion: Redundant bracket
Found:
  x ++ (show y)
Perhaps:
  x ++ show y

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:90:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:90:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:94:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:94:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:98:8: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:98:8: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:136:31: Suggestion: Use list literal pattern
Found:
  (x : (y : []))
Perhaps:
  [x, y]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:161:40: Suggestion: Use list literal
Found:
  a : b : []
Perhaps:
  [a, b]

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:167:1: Warning: Eta reduce
Found:
  festHelp list = map evalExpr list
Perhaps:
  festHelp = map evalExpr

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:170:1: Warning: Eta reduce
Found:
  testHelp listSub
    = map
        (\ m ->
           case runSubsM m initialContext of
               Right (a, _) -> a
               Left er -> UndefinedVal)
        listSub
Perhaps:
  testHelp
    = map
        (\ m ->
           case runSubsM m initialContext of
               Right (a, _) -> a
               Left er -> UndefinedVal)

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:174:16: Warning: Redundant return
Found:
  do expr <- evalExpr exp
     return expr
Perhaps:
  do evalExpr exp

/tmp/tmp5j8jq8c0/src/SubsInterpreter.hs:187:1: Warning: Eta reduce
Found:
  exprToValueList list = map helpEval list
Perhaps:
  exprToValueList = map helpEval

23 hints
src/SubsInterpreter.hs:51:66: trailing (1) white space
src/SubsInterpreter.hs:60:1: too long line (91 chars)
src/SubsInterpreter.hs:128:40: trailing (1) white space
src/SubsInterpreter.hs:135:49: trailing (1) white space
src/SubsInterpreter.hs:136:1: too long line (88 chars)
src/SubsInterpreter.hs:142:68: trailing (1) white space
src/SubsInterpreter.hs:145:1: too long line (97 chars)
src/SubsInterpreter.hs:146:1: too long line (100 chars)
src/SubsInterpreter.hs:146:101: trailing (1) white space
src/SubsInterpreter.hs:148:1: too long line (88 chars)
src/SubsInterpreter.hs:153:1: too long line (94 chars)
src/SubsInterpreter.hs:171:50: trailing (1) white space
src/SubsInterpreter.hs:192:1: too long line (84 chars)
src/SubsInterpreter.hs:55:11: non-conventional comment start: {--
 
src/SubsInterpreter.hs:62:14: non-conventional comment end:   --}
src/SubsInterpreter.hs:132:31: put one blank after -- in --(e
src/SubsInterpreter.hs:140:29: non-conventional comment start: {-- d
src/SubsInterpreter.hs:150:40: non-conventional comment end:   --}
src/SubsInterpreter.hs:151:31: put one blank after -- in --f 
src/SubsInterpreter.hs:152:31: put one blank after -- in --Su
src/SubsInterpreter.hs:153:31: put one blank after -- in --re
src/SubsInterpreter.hs:190:35: break line after "of"
Running some property-based tests...

SubsInterpreter.hs:50:23: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In a case alternative: _ -> ...
   |
50 |                       _ -> Left "Err"
   |                       ^^^^^^^^^^^^^^^
Tests
  Simple expressions
    Variable declaration:           OK
    Addition:                       OK
    Addition and multiplication:    OK
    String concatenation:           OK
    String/Number concatenation:    OK
    String/Number concatenation:    OK
    Undefined:                      OK
    Undefined assignment:           OK
    True constant:                  OK
    False constant:                 OK
    String constant:                OK
    Comma:                          OK
    Array:                          OK
    Compare false === false:        OK
    Compare false === true:         OK
    Compare true === false:         OK
    Compare true === true:          OK
    Compare arrays:                 OK
    Compare arrays:                 OK
  Multiple expressions
    Assignments are stored:         OK
    Assignments can be overridden:  OK
    Variable-swap:                  FAIL
      test.hs:24:
      Comma (Assign "x" (Number 2))
            (Comma (Assign "y" (Number 3))
                   (Comma (Assign "tmp" (Var "x"))
                          (Comma (Assign "x" (Var "y"))
                                 (Comma (Assign "y" (Var "tmp"))
                                        (Array [Var "x",Var "y",
                                                Var "tmp"])))))
      expected: Right (ArrayVal [IntVal 3,IntVal 2,IntVal 2])
       but got: Right (ArrayVal [UndefinedVal,UndefinedVal,UndefinedVal])
    Nested assignment expressions:  OK
  Array comprehensions
    Simple For:                     FAIL
      test.hs:24:
      Compr (ACFor "x"
                   (Array [Number 1,Number 2,Number 3])
                   (ACBody (Call "+" [Var "x",Number 1])))
      expected: Right (ArrayVal [IntVal 2,IntVal 3,IntVal 4])
       but got: Right UndefinedVal
    Computing array of squares:     FAIL
      test.hs:24:
      Compr (ACFor "x"
                   (Array [Number 2,Number 3,Number 4])
                   (ACBody (Call "*" [Var "x",Var "x"])))
      expected: Right (ArrayVal [IntVal 4,IntVal 9,IntVal 16])
       but got: Right UndefinedVal
    Nested For:                     FAIL
      test.hs:24:
      Comma (Assign "xs"
                    (Array [Number 1,Number 2,Number 3]))
            (Compr (ACFor "x"
                          (Var "xs")
                          (ACFor "y" (Var "xs") (ACBody (Number 0)))))
      expected: Right (ArrayVal [IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0])
       but got: Right UndefinedVal
    Filter:                         FAIL
      test.hs:24:
      Comma (Assign "xs"
                    (Array [Number 1,Number 2,Number 3,Number 4,
                            Number 5,Number 6,Number 7,Number 8,Number 9]))
            (Compr (ACFor "x"
                          (Var "xs")
                          (ACIf (Call "==="
                                      [Call "%" [Var "x",Number 2],
                                       Number 1])
                                (ACBody (Var "x")))))
      expected: Right (ArrayVal [IntVal 1,IntVal 3,IntVal 5,IntVal 7,IntVal 9])
       but got: Right UndefinedVal
    Array comprehension scope test: OK
    Array comprehension scope test: FAIL
      test.hs:24:
      Comma (Assign "x" (Number 0))
            (Comma (Compr (ACFor "y"
                                 (Array [Number 1,Number 2,Number 3])
                                 (ACBody (Assign "x" (Var "y")))))
                   (Var "x"))
      expected: Right (IntVal 3)
       but got: Right (IntVal 0)

6 out of 29 tests failed (0.01s)
Our tests could not be run with your source.
static/strict-compile.sh FAILED
static/hlint.sh FAILED
static/style-scanner.sh FAILED
dynamic/hunit.sh FAILED
---
I am not fully satisfied.
---
Found a bug? Are the messages too cryptic?
Let us know at Absalon.


SubsInterpreter.hs:49:29: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
   |
49 |                       (env, penv) -> Right (x, env)
   |                             ^^^^

SubsInterpreter.hs:50:23: error: [-Woverlapping-patterns, -Werror=overlapping-patterns]
    Pattern match is redundant
    In a case alternative: _ -> ...
   |
50 |                       _ -> Left "Err"
   |                       ^^^^^^^^^^^^^^^

SubsInterpreter.hs:54:22: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘context’
   |
54 |   fail s =  SubsM $ \context -> Left s
   |                      ^^^^^^^

SubsInterpreter.hs:106:30: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
    |
106 | modifyEnv f = SubsM $ \(env, penv) -> Right ((), f env)
    |                              ^^^^

SubsInterpreter.hs:112:30: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘penv’
    |
112 | getVar name = SubsM $ \(env, penv) -> case Map.lookup name env of
    |                              ^^^^

SubsInterpreter.hs:127:25: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘id’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Base’)
    |
127 |                     Var id -> getVar id
    |                         ^^

SubsInterpreter.hs:128:28: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘id’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Base’)
    |
128 |                     Assign id exp -> do 
    |                            ^^

SubsInterpreter.hs:128:31: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘exp’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Float’)
    |
128 |                     Assign id exp -> do 
    |                               ^^^

SubsInterpreter.hs:133:36: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘x’
    |
133 |                     Call fun exps@(x:xs) -> do
    |                                    ^

SubsInterpreter.hs:133:38: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘xs’
    |
133 |                     Call fun exps@(x:xs) -> do
    |                                      ^^

SubsInterpreter.hs:135:37: error: [-Wincomplete-patterns, -Werror=incomplete-patterns]
    Pattern match(es) are non-exhaustive
    In a case alternative:
        Patterns not matched:
            []
            [_]
            (_:_:_:_)
    |
135 |                             vals <- case exps of 
    |                                     ^^^^^^^^^^^^^...

SubsInterpreter.hs:136:32: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘x’ shadows the existing binding
      bound at SubsInterpreter.hs:133:36
    |
136 |                               (x:y:[]) -> twoSubsAppendedToOne (evalExpr x) (evalExpr y)
    |                                ^

SubsInterpreter.hs:138:38: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘er’
    |
138 |                                 Left er -> UndefinedVal
    |                                      ^^

SubsInterpreter.hs:164:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘actualHelp’
    |
164 | actualHelp list = testHelp $ festHelp list
    | ^^^^^^^^^^

SubsInterpreter.hs:167:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘festHelp’
    |
167 | festHelp list = map evalExpr list
    | ^^^^^^^^

SubsInterpreter.hs:170:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘testHelp’
    |
170 | testHelp listSub = map (\m -> case runSubsM m initialContext of
    | ^^^^^^^^

SubsInterpreter.hs:172:38: error: [-Wunused-matches, -Werror=unused-matches]
    Defined but not used: ‘er’
    |
172 |                                 Left er -> UndefinedVal) listSub
    |                                      ^^

SubsInterpreter.hs:174:1: error: [-Wunused-top-binds, -Werror=unused-top-binds]
    Defined but not used: ‘exprHelp’
    |
174 | exprHelp exp = do
    | ^^^^^^^^

SubsInterpreter.hs:174:1: error: [-Wmissing-signatures, -Werror=missing-signatures]
    Top-level binding with no type signature:
      exprHelp :: Expr -> SubsM Value
    |
174 | exprHelp exp = do
    | ^^^^^^^^

SubsInterpreter.hs:174:10: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘exp’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Float’)
    |
174 | exprHelp exp = do
    |          ^^^

SubsInterpreter.hs:192:70: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘a’ shadows the existing binding
      bound at SubsInterpreter.hs:190:44
    |
192 |                                                               Right (a,_) -> Right a
    |                                                                      ^
