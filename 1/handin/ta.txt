Comment:
  src/.SubsAst.hs.swp doesn't look like source code, purging.
  Consider purging this before submitting to a human.
Comment:
  src/ta.txt doesn't look like source code, purging.
  Consider purging this before submitting to a human.
Comment:
  src/.SubsInterpreter.hs.swp doesn't look like source code, purging.
  Consider purging this before submitting to a human.
Comment:
  GHC with -Wall -Werror wasn't happy.
  Hence, your TA not likely to be happy.
Running hlint...
/tmp/tmpmycvmicp/src/SubsInterpreter.hs:48:22: Suggestion: Use lambda-case
Found:
  \ c ->
    case c of
        (env, _) -> Right (x, env)
Perhaps:
  \case
      (env, _) -> Right (x, env)
Note: may require `{-# LANGUAGE LambdaCase #-}` adding to the top of the file

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:74:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:74:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:75:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (StringVal y)]
Perhaps:
  [StringVal x, (StringVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:75:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (StringVal y)]
Perhaps:
  [(StringVal x), StringVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:76:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (StringVal y)]
Perhaps:
  [IntVal x, (StringVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:76:6: Suggestion: Redundant bracket
Found:
  [(IntVal x), (StringVal y)]
Perhaps:
  [(IntVal x), StringVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:76:56: Suggestion: Redundant bracket
Found:
  (show x) ++ y
Perhaps:
  show x ++ y

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:77:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (IntVal y)]
Perhaps:
  [StringVal x, (IntVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:77:6: Suggestion: Redundant bracket
Found:
  [(StringVal x), (IntVal y)]
Perhaps:
  [(StringVal x), IntVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:77:57: Suggestion: Redundant bracket
Found:
  x ++ (show y)
Perhaps:
  x ++ show y

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:81:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:81:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:85:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:85:5: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:89:8: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [IntVal x, (IntVal y)]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:89:8: Suggestion: Redundant bracket
Found:
  [(IntVal x), (IntVal y)]
Perhaps:
  [(IntVal x), IntVal y]

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:143:60: Suggestion: Avoid lambda
Found:
  \ v -> v /= UndefinedVal
Perhaps:
  (/= UndefinedVal)

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:159:1: Warning: Eta reduce
Found:
  concatSubsM list = foldr (liftM2 (\ a b -> a : b)) (return []) list
Perhaps:
  concatSubsM = foldr (liftM2 (\ a b -> a : b)) (return [])

/tmp/tmpmycvmicp/src/SubsInterpreter.hs:159:35: Warning: Avoid lambda
Found:
  \ a b -> a : b
Perhaps:
  (:)

20 hints
src/SubsInterpreter.hs:140:1: too long line (86 chars)
src/SubsInterpreter.hs:141:1: too long line (85 chars)
src/SubsInterpreter.hs:143:1: too long line (89 chars)
src/SubsInterpreter.hs:145:1: too long line (95 chars)
Running some property-based tests...
Tests
  Simple expressions
    Variable declaration:           OK
    Addition:                       OK
    Addition and multiplication:    OK
    String concatenation:           OK
    String/Number concatenation:    OK
    String/Number concatenation:    OK
    Undefined:                      OK
    Undefined assignment:           OK
    True constant:                  OK
    False constant:                 OK
    String constant:                OK
    Comma:                          OK
    Array:                          OK
    Compare false === false:        OK
    Compare false === true:         OK
    Compare true === false:         OK
    Compare true === true:          OK
    Compare arrays:                 OK
    Compare arrays:                 OK
  Multiple expressions
    Assignments are stored:         OK
    Assignments can be overridden:  OK
    Variable-swap:                  OK
    Nested assignment expressions:  OK
  Array comprehensions
    Simple For:                     OK
    Computing array of squares:     OK
    Nested For:                     FAIL
      test.hs:24:
      Comma (Assign "xs"
                    (Array [Number 1,Number 2,Number 3]))
            (Compr (ACFor "x"
                          (Var "xs")
                          (ACFor "y" (Var "xs") (ACBody (Number 0)))))
      expected: Right (ArrayVal [IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0,IntVal 0])
       but got: Right (ArrayVal [ArrayVal [IntVal 0,IntVal 0,IntVal 0],ArrayVal [IntVal 0,IntVal 0,IntVal 0],ArrayVal [IntVal 0,IntVal 0,IntVal 0]])
    Filter:                         OK
    Array comprehension scope test: FAIL
      test.hs:24:
      Comma (Assign "x" (Number 1))
            (Comma (Compr (ACFor "x"
                                 (Array [Number 2,Number 3])
                                 (ACBody (Var "x"))))
                   (Var "x"))
      expected: Right (IntVal 1)
       but got: Right (IntVal 3)
    Array comprehension scope test: OK

2 out of 29 tests failed (0.01s)
Our tests could not be run with your source.
static/strict-compile.sh FAILED
static/hlint.sh FAILED
static/style-scanner.sh FAILED
dynamic/hunit.sh FAILED
---
I am not fully satisfied.
---
Found a bug? Are the messages too cryptic?
Let us know at Absalon.


SubsInterpreter.hs:120:25: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘id’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Base’)
    |
120 |                     Var id -> getVar id
    |                         ^^

SubsInterpreter.hs:121:28: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘id’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Base’)
    |
121 |                     Assign id exp -> do
    |                            ^^

SubsInterpreter.hs:121:31: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘exp’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Float’)
    |
121 |                     Assign id exp -> do
    |                               ^^^

SubsInterpreter.hs:133:35: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘exp’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Float’)
    |
133 |                     Compr (ACBody exp) -> evalExpr exp
    |                                   ^^^

SubsInterpreter.hs:134:34: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘id’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Base’)
    |
134 |                     Compr (ACFor id exp arrCmp) -> do
    |                                  ^^

SubsInterpreter.hs:134:37: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘exp’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Float’)
    |
134 |                     Compr (ACFor id exp arrCmp) -> do
    |                                     ^^^

SubsInterpreter.hs:147:33: error: [-Wname-shadowing, -Werror=name-shadowing]
    This binding for ‘exp’ shadows the existing binding
      imported from ‘Prelude’ at SubsInterpreter.hs:1:8-22
      (and originally defined in ‘GHC.Float’)
    |
147 |                     Compr (ACIf exp arrCmp) -> do
    |                                 ^^^
