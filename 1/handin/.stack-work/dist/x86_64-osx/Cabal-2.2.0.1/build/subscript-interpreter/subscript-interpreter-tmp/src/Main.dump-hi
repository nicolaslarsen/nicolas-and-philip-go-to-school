
==================== FINAL INTERFACE ====================
2018-10-04 02:28:26.454544 UTC

interface main:Main 8043
  interface hash: 71094c4ab1d0523010c52a7e22e65636
  ABI hash: 315d6da6789301e3e18c393d044cc230
  export-list hash: 6399789ca7254f8ac9b25af85d251e1e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0eee87af55d9160264231265d1dbf9d2
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: SubsAst SubsInterpreter
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 052ec29b676ed8efc1decd97140a27e3
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  SubsInterpreter caae4b365f9bb2d6d23a085cdac480e9
  exports: 7e550c7c409666aa3f23d25ea9ad546d
  ArrayVal 19a509e06e5307bf29cb814c56e97022
  FalseVal 3bd775f5910c6cea0b4776ff847e6548
  IntVal 26f4d0358238d885f623fad24d9137c7
  StringVal 0e083bb845e63bb4970d558778fbd311
  TrueVal 83fb079c6e6b9ed6f3397b8deb8cd97e
  UndefinedVal 912a2d9691a8d329dd270c458239518e
  Value d9a7c81ab59e8c4806658444081122aa
  runExpr 383dc95740089b881f70a2a74eac68ba
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
26282bc2ab76a5bdd3edad9cbeb463a4
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
89441b9428759ce0174d51be482c63ef
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> case Main.main6
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : file ds
                   -> case ds of wild1 {
                        []
                        -> case GHC.IO.Handle.FD.openFile1
                                  file
                                  GHC.IO.IOMode.ReadMode
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           case GHC.IO.Handle.Text.hGetContents1
                                  ipv3
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           case Text.Read.readEither8
                                  @ SubsAst.Expr
                                  (Text.ParserCombinators.ReadP.run
                                     @ SubsAst.Expr
                                     (SubsAst.$fReadExpr1
                                        Text.ParserCombinators.ReadPrec.minPrec
                                        @ SubsAst.Expr
                                        (Text.Read.readEither7 @ SubsAst.Expr))
                                     ipv5) of wild2 {
                             []
                             -> case Main.main5
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             : x ds4
                             -> case ds4 of wild3 {
                                  []
                                  -> case (SubsInterpreter.evalExpr x)
                                            `cast`
                                          (SubsInterpreter.N:SubsM[0] <SubsInterpreter.Value>_R)
                                            SubsInterpreter.initialContext of wild4 {
                                       Data.Either.Left er
                                       -> case Main.main4 er
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       Data.Either.Right ds5
                                       -> case ds5 of wild5 { (,) a ds6 ->
                                          GHC.IO.Handle.Text.hPutStr2
                                            GHC.IO.Handle.FD.stdout
                                            (GHC.CString.unpackAppendCString#
                                               Main.main3
                                               (Main.nice a))
                                            GHC.Types.True
                                            ipv4 } }
                                  : ipv6 ipv7
                                  -> case Main.main2
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {} } } } }
                        : ipv2 ipv3
                        -> case Main.main6
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } }) -}
8183e8d525625a61fd8d61d442940042
  main2 :: SubsAst.Expr
  {- Strictness: x -}
4cf501ced528db35d21faf1fe56b5fc7
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Result is: "#) -}
90d3e1d3b5d8b72c88d99a9cb12c812e
  main4 :: SubsInterpreter.Error -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <B,U>x -}
8cd1231c663cf9df115f80b183437888
  main5 :: SubsAst.Expr
  {- Strictness: x -}
062966910f881f98b54d1eadd2721b55
  main6 :: GHC.Types.IO ()
  {- Strictness: x -}
fb2ad5bdc08dad8963d8ca10fc92cdad
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
40a1230022add3e8e9fcbb5661ac30b7
  nice :: SubsInterpreter.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

